#两种调整图片大小的方法
#第一种是通过四种算法调整图片的大小
#第二种是通过裁剪或者填充方式调整图片大小

import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib as mpl



mpl.rcParams['font.sans-serif']=['SimHei'] #指定默认字体 SimHei为黑体
mpl.rcParams['axes.unicode_minus']=False


image_data_raw = tf.gfile.FastGFile('output','rb').read()

with tf.Session() as sess:

    image_data = tf.image.decode_png(image_data_raw)
    #在调整大小之前先将数据转化为实数类型
    image_data = tf.image.convert_image_dtype(image_data,tf.float32)

    #第一个参数为输入的图片，第二个参数为要调整的大小，第三个参数为选择的算法
    resized_1 = tf.image.resize_images(image_data,[300,300],method=0)
    resized_2 = tf.image.resize_images(image_data,[300,300],method=1)
    resized_3 = tf.image.resize_images(image_data,[300, 300],method=2)
    resized_4 = tf.image.resize_images(image_data,[300, 300],method=3)

    fit = plt.figure()
    plt.subplot(2, 3, 1)
    plt.imshow(resized_1.eval())
    plt.title('原始图片')
    plt.subplot(2,3,2)
    plt.imshow(resized_1.eval())
    plt.title('双线性插值')
    plt.subplot(2,3,3)
    plt.imshow(resized_2.eval())
    plt.title('最近邻居')
    plt.subplot(2,3,4)
    plt.imshow(resized_3.eval())
    plt.title('双三次插值')
    plt.subplot(2,3,5)
    plt.imshow(resized_4.eval())
    plt.title('面积插值')
    plt.show()

    #裁剪图片，原始尺寸大于目标尺寸则截取居中部分
    croped = tf.image.resize_image_with_crop_or_pad(image_data,1000,1000)
    #原始尺寸小于目标尺寸则填充全0背景
    padded = tf.image.resize_image_with_crop_or_pad(image_data,5000,5000)

    fit1 = plt.figure()
    plt.subplot(1,3,1)
    plt.imshow(image_data.eval())
    plt.title('原始图片')
    plt.subplot(1, 3, 2)
    plt.imshow(croped.eval())
    plt.title('裁剪后的图片')
    plt.subplot(1, 3, 3)
    plt.imshow(padded.eval())
    plt.title('填充后的图片')
    plt.show()

